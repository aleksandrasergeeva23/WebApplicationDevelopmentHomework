{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-6ce0c0c4\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  id: \"signinDiv\"\n};\nvar _hoisted_2 = {\n  \"class\": \"dataInsertion\"\n};\nvar _hoisted_3 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"p\", {\n    \"class\": \"message\"\n  }, \"Email\", -1 /* HOISTED */);\n});\nvar _hoisted_4 = {\n  key: 0\n};\nvar _hoisted_5 = {\n  \"class\": \"dataInsertion\"\n};\nvar _hoisted_6 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"p\", {\n    \"class\": \"message\"\n  }, \"Password\", -1 /* HOISTED */);\n});\nvar _hoisted_7 = {\n  key: 1\n};\nvar _hoisted_8 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"span\", null, [/*#__PURE__*/_createElementVNode(\"button\", {\n    \"class\": \"submit\"\n  }, \"Signup\")], -1 /* HOISTED */);\n});\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"span\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"edit me\",\n    \"class\": \"input_field\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.email = $event;\n    }),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]])]), $data.msg.email ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, _toDisplayString($data.msg.email), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"span\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"edit me\",\n    \"class\": \"input_field\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.password = $event;\n    }),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), $data.msg.password ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, _toDisplayString($data.msg.password), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _hoisted_8]);\n}","map":{"version":3,"mappings":";;;;;EAESA,EAAE,EAAC;AAAW;;EACb,SAAM;AAAe;;sBAACC,oBAA4B;IAAzB,SAAM;EAAS,GAAC,OAAK;AAAA;;;;;EAI9C,SAAM;AAAe;;sBAAEA,oBAA+B;IAA5B,SAAM;EAAS,GAAC,UAAQ;AAAA;;;;;sBAIxDA,oBAAmD,4BAA7CA,oBAAsC;IAA9B,SAAM;EAAQ,GAAC,QAAM;;;;uBATnCC,oBAUM,OAVNC,UAUM,GATNF,oBAEO,QAFPG,UAEO,GAFqBC,UAA4B,kBACxDJ,oBAAwF;IAAjFK,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,SAAS;IAAC,SAAM,aAAa;;aAAUC,WAAK;IAAA;IAAEC,QAAQ,EAAR;iDAAPD,WAAK,OAE/DA,SAAG,CAACE,KAAK,kBAArBR,oBAA2C,qCAAlBM,SAAG,CAACE,KAAK,uDAClCT,oBAEO,QAFPU,UAEO,GAFsBC,UAA+B,kBAC5DX,oBAA0F;IAAnFK,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,SAAS;IAAC,SAAM,aAAa;;aAAUC,cAAQ;IAAA;IAAEC,QAAQ,EAAR;iDAAVD,cAAQ,OAElEA,SAAG,CAACK,QAAQ,kBAAxBX,oBAAiD,qCAArBM,SAAG,CAACK,QAAQ,uDACxCC,UAAmD","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","placeholder","$data","required","email","_hoisted_5","_hoisted_6","password","_hoisted_8"],"sourceRoot":"","sources":["/Users/sergeevaaleksandra/Documents/GitHub/WebApplicationDevelopmentHomework1/HW3/src/components/SignInCompo.vue"],"sourcesContent":["\n<template>\n    <div id=\"signinDiv\">\n    <span class=\"dataInsertion\"><p class=\"message\">Email</p>\n    <input type=\"text\" placeholder=\"edit me\" class=\"input_field\" v-model=\"email\" required />\n    </span>\n    <span v-if=\"msg.email\">{{msg.email}}</span>\n    <span class=\"dataInsertion\" ><p class=\"message\">Password</p>\n    <input type=\"text\" placeholder=\"edit me\" class=\"input_field\" v-model=\"password\" required/>\n    </span>\n    <span v-if=\"msg.password\">{{msg.password}}</span>\n    <span><button class=\"submit\">Signup</button></span>\n    </div>\n</template>\n\n<script>\nexport default {\n\n  data(){\n    return {\n      password: '',\n      email: '',\n      msg: []\n    }\n  },\n  watch: {\n    email(value){\n      this.email = value;\n      this.validateEmail(value);\n    },\n    password(value){\n        this.password = value;\n        this.validatePassword(value);\n    }\n  },\n  methods:{\n    validateEmail(value){\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value))\n  {\n    this.msg['email'] = '';\n  } else {\n    this.msg['email'] = 'Invalid Email Address';\n  }\n},\n  validatePassword(value){\n      let differenceSmaller = 8 - value.length;\n      let differenceBigger = value.length - 8;\n      if (value.length<8) {\n        this.msg['password'] = 'Must be 8 characters! '+ difference + ' characters left' ;\n      } else if(!value.length>15){\n        this.msg['password'] = 'Must be not more than 15 characters! Reduce from '+ difference + ' characters' ;\n      } \n      else if(!/\\d/.test(value)){\n        this.msg['password'] = 'It must contain at least one digit';\n      } else if(!/[A-Z]/.test(value)){\n        this.msg['password'] = 'It must contain at least one uppercase letter';\n      } else if(!/[a-z]*[a-z]/.test(value)){\n        this.msg['password'] = 'It must contain at least two lowercase letters';\n      }\n      else if(!/[_]/.test(value)){\n        this.msg['password'] = 'It must contain at least one underscore';\n    }\n      else{\n        this.msg['password'] = '';\n      }\n    }\n} \n}\n</script>\n\n<style scoped>\n\n\n#signinDiv{\n    background-color: rgb(255, 255, 255);\n    box-shadow: 1px 2px 50px rgba(0, 0, 0, 0.733);\n    border-radius: 40px;\n    margin-top: 40px;\n    padding: 10px 20px;\n    margin-left: 230px;\n    margin-right: 230px;\n}\n.message{\n    border: none;\n    cursor: pointer;\n    padding: 10px 20px;\n    display: inline-block;\n    text-align: left;\n}\n.dataInsertion{\n    display: block;\n}\n.input_field{\n    display: inline-block;\n    text-align: right;\n}\n.submit{\n    background-color: rgb(72, 177, 163);\n    color: white;\n    font-size: 16px;\n    border-radius: 10px;\n}\n\n\n</style>"]},"metadata":{},"sourceType":"module"}